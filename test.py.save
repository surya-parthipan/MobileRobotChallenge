import cv2
import numpy as np
import picamera
import picamera.array
from time import sleep
import time

import ZeroBorg

ZB = ZeroBorg.ZeroBorg()

# Parameters
KNOWN_WIDTH = 16.0 # The actual width of the object in centimeters (change this to your target object width)
FOCAL_LENGTH = 500 # The focal length of the camera in pixels (change this to your camera's focal length)

def distance_to_camera(known_width, focal_length, per_width):
    return (known_width * focal_length) / per_width

def detect_object(image):
    # Convert image to grayscale
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

    # Apply edge detection
    edges = cv2.Canny(gray, 50, 150)

    # Find contours
    contours, _ = cv2.findContours(edges, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    # Filter out small contours
    filtered_contours = [cnt for cnt in contours if cv2.contourArea(cnt) > 100]

    # Sort contours by area and choose the largest one
    if filtered_contours:
        largest_contour = max(filtered_contours, key=cv2.contourArea)
        return largest_contour
    else:
        return None

with picamera.PiCamera() as camera:
    with picamera.array.PiRGBArray(camera) as stream:
        camera.resolution = (640, 480)
        camera.framerate = 30

        sleep(2)  # Camera warm-up time
        count_flag = 0
        dist_array = []
        while True:
            camera.capture(stream, 'bgr', use_video_port=True)
            image = stream.array
            image = cv2.flip(image, -1)
            object_contour = detect_object(image)

            if object_contour is not None:
                # Calculate object width in pixels
                x, y, w, h = cv2.boundingRect(object_contour)
                # Calculate distance to object
                distance = distance_to_camera(KNOWN_WIDTH, FOCAL_LENGTH, w)
                dist_array.append(distance)
                count_flag += 1
                # Draw a bounding box around the object and display the distance
                cv2.rectangle(image, (x, y), (x + w, y + h), (0, 255, 0), 2)
                cv2.putText(image, str(distance), (x, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)
                #cv2.putText(image, f"{distance:.1f} cm", (x, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)

            # Show the image
            cv2.imshow('Object Detection and Distance Measurement', image)

            # Reset the stream before the next capture
            stream.truncate(0)

            # Break the loop if the 'q' key is pressed
            if cv2.waitKey(1) & 0xFF == ord('q') or count_flag > 20:
                print(np.round(dist_array))
                #find unique values in array along with their counts
                vals, counts = np.unique(dist_array, return_counts=True)
                #find mode
                mode_value = np.argwhere(counts == np.max(counts))
                mode_values = vals[mode_value]
                distance_measured = np.mean(mode_values)
                
                print(mode_values)
                print(distance_measured)
                break
           
# Power sry voltage to the ZeroBorg (change to 9V if using a non-rechargeable battery)
voltageOut = 6.0                        # Maximum motor voltage

# Setup the power limits
if voltageOut > voltageIn:
    maxPower = 1.0
else:    maxPower = voltageOut / float(voltageIn)


# Function to perform a general movement
def PerformMove(driveLeft, driveRight, numSeconds):
    # Set the motors running
    ZB.SetMotor1(-driveRight * maxPower) # Rear right
    ZB.Set
v2.destroyAllWindows()
